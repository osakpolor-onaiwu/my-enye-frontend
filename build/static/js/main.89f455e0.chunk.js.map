{"version":3,"sources":["redux/getRecord.jsx","components/pagination.jsx","components/recordfull.jsx","components/recordview.jsx","components/filter.jsx","components/search.jsx","components/navbar.jsx","components/home.js","App.js","redux/reducer.js","index.js"],"names":["GetRecord","payload","config","headers","dispatch","axios","get","then","res","type","data","records","profiles","catch","err","Pagination","recordPerPage","TotalRecord","paginate","pageNumbers","i","Math","ceil","push","className","map","number","onClick","to","Record","record","m","l","s","id","FirstName","LastName","UserName","Gender","Email","LastLogin","DomainName","PhoneNumber","Latitude","Longitude","CreditCardNumber","CreditCardType","PaymentMethod","MacAddress","URL","RecordView","href","actions","flat","modal","node","waves","bottomSheet","fixedFooter","open","options","dismissible","endingTop","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","opacity","outDuration","preventScrolling","startingTop","Output","filter","male","female","other","money","check","Cards","Paypal","length","Search","searchValue","toLowerCase","split","word","charAt","toUpperCase","slice","join","match","SearchResult","filters","handleChange","placeholder","name","onChange","Navbar","useState","show","state","setState","toggle","mobileLink","size","color","document","getElementById","MobileNavLink","style","fontSize","Home","search","currentPage","e","target","value","console","log","pageNumber","this","props","indexOfLastPost","indexOfFirstPost","currentPosts","default","Component","connect","App","exact","path","component","initialState","Reducer","action","store","createStore","applyMiddleware","thunk","withExtraArgument","ReactDOM","render"],"mappings":"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","file":"static/js/main.89f455e0.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst GetRecord = (payload) => {\r\n    const config={\r\n        headers:{\r\n             headers:{\r\n            \"Content-Type\":\"application/json\"\r\n        }\r\n        }\r\n    }\r\n    return(dispatch)=>{\r\naxios.get('https://api.enye.tech/v1/challenge/records',config)\r\n.then(res=>{\r\n    dispatch({\r\n        type:'GET RECORD',\r\n        payload:res.data.records.profiles\r\n    })\r\n})\r\n.catch(err=>{\r\n    dispatch({\r\n        type:'GET RECORD ERROR',\r\n        err\r\n    })\r\n})\r\n    }\r\n}\r\n\r\nexport default GetRecord","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Pagination = ({ recordPerPage, TotalRecord, paginate }) => {\r\n    const pageNumbers = [];\r\n\r\n\r\n    // this effects the pagination. the for loop divides\r\n    // the total records by the amount of records we want per page then adds\r\n    // the amount of record gotten to the page number array\r\n    //the onclick event calls the pagination function in home component and passes the number argument to it\r\n\r\n    for (let i = 1; i <= Math.ceil(TotalRecord / recordPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n    return (\r\n        <div className=\"transparent \">\r\n           \r\n            <h6 className='center white-text'> pages</h6>\r\n\r\n            <ul className=\"white-text \">\r\n\r\n                {pageNumbers.map((number) => {\r\n                    return (\r\n                        <li key={number} className=\"white-text \" >\r\n                            <NavLink\r\n                                className=\"white-text page \"\r\n                                onClick={() => paginate(number)}\r\n                                to=\"#\">\r\n                                {number}\r\n                            </NavLink>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Col, CardPanel, Row } from \"react-materialize\";\r\n\r\nconst Record = ({ record }) => {\r\n    //this gives the output of full record when a user clicks the button\r\n    //in the home page\r\n\r\n    return (\r\n        <Row className=\"contain-card\">\r\n            <Col\r\n                className=\"cards black-text\"\r\n                key={record.UserName}\r\n                m={12}\r\n                l={12}\r\n                s={12}>\r\n                <div className=\"divider\"></div>\r\n\r\n                <Row>\r\n                    <Col s={12} l={6}>\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>First Name </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.FirstName}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Last Name </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.LastName}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>User Name </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.UserName}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Gender </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.Gender}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Email </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.Email}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Last Login </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.LastLogin}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Domain Name </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.DomainName}</li>\r\n                        </ul>\r\n                    </Col>\r\n\r\n                    <Col s={12} l={6}>\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Phone </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.PhoneNumber}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Latitude </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.Latitude}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Longitude </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.Longitude}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Credit card no. </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.CreditCardNumber}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Credit cart type </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.CreditCardType}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Payment method </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.PaymentMethod}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Mac Address </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.MacAddress}</li>\r\n                        </ul>\r\n\r\n                        <ul id=\"space\">\r\n                            <li className=\"keys\">\r\n                                <strong>Url </strong>\r\n                            </li>\r\n                            <li className=\"value\">{record.URL}</li>\r\n                        </ul>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default Record;\r\n","import React, { useEffect } from \"react\";\r\nimport { Col, CardPanel,Modal,Button, Row } from \"react-materialize\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Record from \"./recordfull\";\r\nimport M from \"materialize-css\";\r\n\r\nconst RecordView = ({ record }) => {\r\n    \r\n\r\n    return (\r\n        <Col key={record.UserName} m={6} l={4} s={12}>\r\n            <CardPanel className=\" cards black-text\">\r\n                <h4>\r\n                    {record.FirstName} {record.LastName}\r\n                </h4>\r\n                <p>\r\n                    <strong> Payment Method : </strong>\r\n                    {record.PaymentMethod}\r\n                </p>\r\n                <p>\r\n                    <strong>Gender : </strong> {record.Gender}\r\n                </p>\r\n\r\n                {/* initiates the modal */}\r\n                <a\r\n                    id='button-colour'\r\n                    className=\" btn-flat  center modal-trigger \"\r\n                    href=\"#modal1\"\r\n                   \r\n                >\r\n                    Click to view full detail\r\n                </a>\r\n                <Modal\r\n                    actions={[\r\n                    <Button flat modal=\"close\" node=\"button\" waves=\"green\">Close</Button>\r\n                    ]}\r\n                    bottomSheet={false}\r\n                    fixedFooter={false}\r\n                    id=\"modal1\"\r\n                    open={false}\r\n                    options={{\r\n                    dismissible: true,\r\n                    endingTop: '10%',\r\n                    inDuration: 250,\r\n                    onCloseEnd: null,\r\n                    onCloseStart: null,\r\n                    onOpenEnd: null,\r\n                    onOpenStart: null,\r\n                    opacity: 0.5,\r\n                    outDuration: 250,\r\n                    preventScrolling: true,\r\n                    startingTop: '4%'\r\n                    }}\r\n                >\r\n                <Record record={record}/>\r\n                </Modal>\r\n            </CardPanel>\r\n\r\n           \r\n        </Col>\r\n    );\r\n};\r\n\r\nexport default RecordView;\r\n","import React from \"react\";\r\nimport { Row, Col } from \"react-materialize\";\r\nimport Pagination from \"./pagination\";\r\nimport RecordView from \"./recordview\" ;\r\n\r\nconst Output = ({\r\n    records,\r\n    filter,\r\n}) => {\r\n\r\n    //returns values based on the state of the home component\r\n    //it controls the search and filters\r\n    const filters = () => {\r\n      \r\n\r\n        switch (filter) {\r\n\r\n            //if the state is empty\r\n            case \"\": {\r\n                const all = records ? (\r\n                    records.map((record) => {\r\n                        return <RecordView key={record.UserName} record={record} />;\r\n                    })\r\n                ) : (\r\n                    <div>loading Records ....</div>\r\n                );\r\n                return all;\r\n            }\r\n\r\n            case \"Male\":\r\n                {\r\n                    const male = records.filter((record) => {\r\n                        return record.Gender === \"Male\";\r\n                    });\r\n                    const Males = male ? (\r\n                        male.map((record) => {\r\n                            return <RecordView key={record.UserName} record={record} />;\r\n                        })\r\n                    ) : (\r\n                        <div>loading Records ....</div>\r\n                    );\r\n                    return Males;\r\n                }\r\n                break;\r\n\r\n            case \"Female\":\r\n                {\r\n                    const female = records.filter((record) => {\r\n                        return record.Gender == \"Female\";\r\n                    });\r\n                    const Females = female ? (\r\n                        female.map((record) => {\r\n                            return <RecordView key={record.UserName} record={record} />;\r\n                        })\r\n                    ) : (\r\n                        <div>loading Records ....</div>\r\n                    );\r\n                    return Females;\r\n                }\r\n                break;\r\n\r\n            case \"Prefer to skip\":\r\n                {\r\n                    const other = records.filter((record) => {\r\n                        return record.Gender == \"Prefer to skip\";\r\n                    });\r\n                    const Others = other ? (\r\n                        other.map((record) => {\r\n                            return <RecordView key={record.UserName} record={record} />;\r\n                        })\r\n                    ) : (\r\n                        <div>loading Records ....</div>\r\n                    );\r\n                    return Others;\r\n                }\r\n                break;\r\n\r\n            case \"money order\":\r\n                {\r\n                    const money = records.filter((record) => {\r\n                        return record.PaymentMethod == \"money order\";\r\n                    });\r\n                    const MoneyOrder = money ? (\r\n                        money.map((record) => {\r\n                            return <RecordView key={record.UserName} record={record} />;\r\n                        })\r\n                    ) : (\r\n                        <div>loading Records ....</div>\r\n                    );\r\n                    return MoneyOrder;\r\n                }\r\n                break;\r\n\r\n            case \"check\":\r\n                {\r\n                    const check = records.filter((record) => {\r\n                        return record.PaymentMethod == \"check\";\r\n                    });\r\n                    const Checks = check ? (\r\n                        check.map((record) => {\r\n                            return <RecordView key={record.UserName} record={record} />;\r\n                        })\r\n                    ) : (\r\n                        <div>loading Records ....</div>\r\n                    );\r\n                    return Checks;\r\n                }\r\n                break;\r\n\r\n            case \"cc\":\r\n                {\r\n                    const Cards = records.filter((record) => {\r\n                        return record.PaymentMethod == \"cc\";\r\n                    });\r\n                    const CreditCard = Cards ? (\r\n                        Cards.map((record) => {\r\n                            return <RecordView key={record.UserName} record={record} />;\r\n                        })\r\n                    ) : (\r\n                        <div>loading Records ....</div>\r\n                    );\r\n                    return CreditCard;\r\n                }\r\n                break;\r\n\r\n            case \"paypal\":\r\n                {\r\n                    const Paypal = records.filter((record) => {\r\n                        return record.PaymentMethod == \"paypal\";\r\n                    });\r\n                    const Paypals = Paypal ? (\r\n                        Paypal.map((record) => {\r\n                            return <RecordView key={record.UserName} record={record} />;\r\n                        })\r\n                    ) : (\r\n                        <div>loading Records ....</div>\r\n                    );\r\n                    return Paypals;\r\n                }\r\n                break;\r\n\r\n            //returns all the data\r\n            case \"all\":\r\n                {\r\n                    const all = records ? (\r\n                        records.map((record) => {\r\n                            return <RecordView key={record.UserName} record={record} />;\r\n                        })\r\n                    ) : (\r\n                        <div>loading Records ....</div>\r\n                    );\r\n                    return all;\r\n                }\r\n                break;\r\n\r\n            //checks the search value , converts them to sentence case and returns the records\r\n            //forms a full name by adding first and last name,\r\n            //then check value of  the search and check if it matches the fullName\r\n            //value of the search box\r\n            default:\r\n                {\r\n                    if (filter.length > 0) {\r\n                        const Search = records.filter((record) => {\r\n                            const searchValue = filter\r\n                                .toLowerCase()\r\n                                .split()\r\n                                .map((word) => {\r\n                                    return (\r\n                                        word.charAt(0).toUpperCase() +\r\n                                        word.slice(1)\r\n                                    );\r\n                                })\r\n                                .join();\r\n\r\n                            const fullName=record.FirstName+record.LastName\r\n                           \r\n                            return (\r\n                                fullName.match(searchValue) \r\n                            );\r\n                        });\r\n                        const SearchResult = Search ? (\r\n                            Search.map((record) => {\r\n                                return (\r\n                                 <div key={record.UserName}>   \r\n                                \r\n                                <RecordView key={record.UserName} record={record} />\r\n                                </div>\r\n                                )\r\n                            })\r\n                        ) : (\r\n                            <h2 className='black-text'>No Record Matches {filter}</h2>\r\n                        );\r\n                        return (\r\n                            <div>\r\n                            <h5 className='black-text'>found {Search.length} results</h5>\r\n                            {SearchResult}\r\n                            </div>);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            \r\n            {filters()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Output;\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Search({ handleChange }) {\r\n  //this component receives the handlechange method from the home \r\n  //component through the filter component\r\n    return (\r\n        <form >\r\n            <div className=\"input-field \">\r\n                <input\r\n                    placeholder=\"Search\"\r\n                    type=\"text\"\r\n                    name='filter'\r\n                    onChange={handleChange}\r\n                    className=\"validate browser-default\"\r\n                />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\n","import React, { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { AlignJustify, X } from \"react-feather\";\r\n\r\n\r\nconst Navbar = () => {\r\n    const initState = {\r\n        show: false,\r\n    };\r\n\r\n    const [state, setState] = useState(initState);\r\n    const toggle = () => {\r\n        setState({\r\n            show: !state.show,\r\n        });\r\n    };\r\n\r\n\r\n    //modal that shows on small screen when the user clicks the bar icon on small screen\r\n    const MobileNavLink = () => {\r\n        \r\n        const mobileLink = (\r\n            <div id=\"modParent\">\r\n\r\n                <ul id=\"modUl\">\r\n                    <li className=\"linka\" onClick={toggle}>\r\n                        <X size=\"24\" color=\"white\" />\r\n                    </li>\r\n                    <li>\r\n                        <NavLink className=\"navli\" to=\"/\">\r\n                            home\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink className=\"navli\" to=\"/signUP\">\r\n                            SignUp\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink className=\"navli\" to=\"/login\">\r\n                            Login\r\n                        </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n        \r\n        let dropdown;\r\n        const x = document.getElementById(\"mobile\");\r\n        if (state.show === true) {\r\n            return (dropdown = mobileLink);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div id=\"parentDiv\">\r\n\r\n            <ul id=\"desktop\" >\r\n                <a href=\"#\">Records</a>\r\n                <li className=\"link1\">\r\n                    <NavLink className=\"navlink\" to=\"/\">\r\n                        home\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink className=\"navlink\" to=\"/signUP\">\r\n                        SignUp\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink className=\"navlink\" to=\"/login\">\r\n                        Login\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink className=\"navlink\" to=\"/#\">\r\n                        Categories\r\n                    </NavLink>\r\n                </li>\r\n            </ul>\r\n\r\n            {MobileNavLink()}\r\n\r\n            <ul id=\"mobile\" >\r\n                <a style={{ fontSize: \"23px\" }} href=\"#\">\r\n                    Records\r\n                </a>\r\n\r\n                <li onClick={toggle}>\r\n                    <AlignJustify size=\"24\" color=\"white\" />\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport GetRecord from \"../redux/getRecord\";\r\nimport { Row, Col } from \"react-materialize\";\r\nimport Filter from \"./filter\";\r\nimport Search from \"./search\";\r\nimport Navbar from \"./navbar\";\r\nimport Pagination from \"./pagination\";\r\n\r\nexport class Home extends Component {\r\n    state = {\r\n        filter: \"\",\r\n        search: \"\",\r\n        currentPage: 1,\r\n        recordPerPage: 20,\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            ...this.state,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n        console.log(this.state.filter);\r\n    };\r\n\r\n    paginate = (pageNumber) => {\r\n        this.setState({\r\n            ...this.state,\r\n            currentPage: pageNumber,\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        this.props.GetRecord();\r\n    }\r\n\r\n    render() {\r\n        //this helps in pagination\r\n        const { record } = this.props;\r\n        const indexOfLastPost =\r\n            this.state.currentPage * this.state.recordPerPage;\r\n        const indexOfFirstPost = indexOfLastPost - this.state.recordPerPage;\r\n        const currentPosts = record.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n        return (\r\n            <main>\r\n                <Row>\r\n                    <Col s={12} l={7} className=\"rightSide\">\r\n                        <Row>\r\n                            <Navbar />\r\n                        </Row>\r\n\r\n                        <Row id=\"search\">\r\n                            <Col s={12}>\r\n                                <Search handleChange={this.handleChange} />\r\n                            </Col>\r\n\r\n                            {/* filter by gender */}\r\n\r\n                            <Col s={6} m={6}>\r\n                                <label className=\"white-text\">\r\n                                    Filter by gender\r\n                                </label>\r\n\r\n                                <select\r\n                                    default={this.state.filter}\r\n                                    name=\"filter\"\r\n                                    onChange={this.handleChange}\r\n                                    className=\"browser-default\">\r\n                                    <option value=\"all\">All</option>\r\n                                    <option value=\"Male\">Male</option>\r\n                                    <option value=\"Female\">Female</option>\r\n                                    <option value=\"Prefer to skip\">\r\n                                        Others\r\n                                    </option>\r\n                                </select>\r\n                            </Col>\r\n\r\n                            {/* filter by payment */}\r\n                            <Col s={6} m={6}>\r\n                                <label className=\"white-text\">\r\n                                    Filter by Payment Method\r\n                                </label>\r\n\r\n                                <select\r\n                                    default={this.state.filter}\r\n                                    name=\"filter\"\r\n                                    onChange={this.handleChange}\r\n                                    className=\"browser-default\">\r\n                                    <option value=\"all\">All</option>\r\n                                    <option value=\"money order\">\r\n                                        Money Order\r\n                                    </option>\r\n                                    <option value=\"check\">Check</option>\r\n                                    <option value=\"cc\">CreditCard</option>\r\n                                    <option value=\"paypal\">Paypal</option>\r\n                                </select>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <Pagination\r\n                                recordPerPage={this.state.recordPerPage}\r\n                                TotalRecord={this.props.record.length}\r\n                                paginate={this.paginate}\r\n                            />\r\n                        </Row>\r\n                    </Col>\r\n\r\n                    {/* right side on desktop */}\r\n                    <Col\r\n                        s={12}\r\n                        l={4}\r\n                        id=\"leftside\"\r\n                        className=\"  hide-on-med-and-down\">\r\n                        <h4 className=\"center black-text\">Get Your Records</h4>\r\n                        <p className=\"black-text\">\r\n                            Search through our list of record to get the what\r\n                            you are looking for. you can use the filter or\r\n                            search bar to make it easier and faster\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {/* card section */}\r\n                <Row className=\"contain\">\r\n                    <Filter\r\n                        recordPerPage={this.state.recordPerPage}\r\n                        TotalRecord={this.props.record.length}\r\n                        paginate={this.paginate}\r\n                        handleChange={this.handleChange}\r\n                        records={currentPosts}\r\n                        filter={this.state.filter}\r\n                        search={this.state.search}\r\n                    />\r\n                </Row>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        record: state.records,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        GetRecord: () => {\r\n            dispatch(GetRecord());\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React from \"react\";\r\nimport Home from \"./components/home\";\r\nimport Navigation from \"./components/navbar\";\r\nimport { Switch, HashRouter, Route } from \"react-router-dom\";\r\nimport Record from \"./components/recordfull\";\r\n\r\nfunction App() {\r\n    return (\r\n        <HashRouter>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route exact path=\"/records/:record\" component={Record} />\r\n            </Switch>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const initialState = {\r\n    records: [],\r\n};\r\n\r\nconst Reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"GET RECORD\":\r\n            return {\r\n                ...state,\r\n                records: action.payload,\r\n            };\r\n\r\n        case \"GET RECORD ERR\":\r\n            return { ...state };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default Reducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"materialize-css/dist/css/materialize.min.css\";\r\nimport \"materialize-css/dist/js/materialize\";\r\nimport App from \"./App\";\r\nimport \"./app.css\";\r\nimport Reducer from \"./redux/reducer\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(Reducer, applyMiddleware(thunk.withExtraArgument()));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}